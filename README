This is a Turing Machine (http://en.wikipedia.org/wiki/Turing_machine) library, written in Python.


This isn't really an accurate Turing Machine emulator. In fact, based on definition, this isn't really a Turing Machine at all. It was, however, an interesting little project for younger me to play with.

Instructions:

NOTE: Besides overviewing the source (the ultimate docs), there is an example file included to demonstrate all functionality.

To create a new Turing Machine, run variable=Turing.TuringMachine([Number of cells in tape]).
The number of cells is glitchy when under 20. I had never gotten around to fixing this.


--------------------------------------------------------------------


Customizations:

NOTE:
"machine" stands for the name given to the instantiation of the TuringMachine class.
1, 0, and blank stand for the internal names. They can be customized.

These can be edited via "machine.[variable]=[whatever you want]"

Format:
	variable[DEFAULT]

one[1]
zero[0]
blank[=]
head[V]

-----------------------------------------------------------------------


Documentation format:

	function(parameters)

	:Explanation

	::Example


initialize([string of 1's/0's/blanks])

:An important function, adds starting data to your tape

::machine.initialize("10101101010101010")



printTape([N/A])

:Most functions which change the way the tape looks automatically call this.
It prints a section of the tape 20 cells long with the head above it in the relevant position.

::printTape()



move(['l' || 'r'])

:Moves the head one cell left or right. Has a one second delay for realism.

::move('l')     or      move('r')



read([N/A])

:This is your only way to see what is on the tape. It returns what is on the current position of the tape relative to the head.

::random_variable=machine.read()



write([bit])

:It writes either a 1, 0, or blank to the current position.

::machine.write('1')



erase([N/A])

:Replaces whatever is on the current position of the tape with a blank

::machine.erase()



eraseAll([N/A])

:Completely erases everything on the tape. This may take a while for very long
tapes (~1.6 seconds per cell)

::machine.eraseAll()



done(N/A)

:You need to call this at the end of your
program or else you won't be able to see final results or
save your results.

::machine.done()
